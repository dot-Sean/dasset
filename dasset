#!/usr/bin/env python
# -*- coding: utf-8 -*-

'''
 Lightweight asset management for Dell hardware.

 *NOTE* the restriction of python shelve, if multiple users
 uses this tool. There is file locking in place that should
 safeguard the DB tho.

 ## The shelve module does not support concurrent read/write
 ## access to shelved objects. (Multiple simultaneous read
 ## accesses are safe.) When a program has a shelf open for writing,
 ## no other program should have it open for reading or writing.

Dependencies:
    * python-suds

Get the most recent version from:
    * https://github.com/teroka/dasset

---------------------------------------------------------------------

 This program is free software: you can redistribute it and/or modify
 it under the terms of the GNU General Public License as published by
 the Free Software Foundation, either version 3 of the License, or
 (at your option) any later version.

 This program is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 GNU General Public License for more details.

 You should have received a copy of the GNU General Public License
 along with this program.  If not, see <http://www.gnu.org/licenses/>.

'''

import suds
import urllib2
import sys
import datetime
import argparse
import json
import re
import shelve
import os
import new
import atexit
from time import sleep
from uuid import uuid4
from random import randint
from fcntl import flock, LOCK_SH, LOCK_NB, LOCK_UN, LOCK_EX

# Set this to where ever you want to store your DB.
DB = os.environ['HOME'] + '/dell_assets.db'

# Datestring which is used to show the warranty/ship dates.
# NOTE: If you change this after populating the DB, you need to update
#       all the entries with --updateall
# DSTRING = '%Y.%m.%d'
DSTRING = '%d.%m.%Y'

# URL for the Dell SOAP api
URL = 'http://xserv.dell.com/services/assetservice.asmx?WSDL'

def opts():
    ''' Option parser '''
    parser = argparse.ArgumentParser(description='''
    Lightweight Asset Management for Dell Hardware''')
    parser.add_argument('stags', nargs='*')
    parser.add_argument('--json', help='Output results as JSON.',
            action="store_true")
    parser.add_argument('--csv', help='Output results as CSV.',
            action="store_true")
    parser.add_argument('--txt', help='Output results as TXT (default).',
            action="store_true")
    parser.add_argument('--update',
            help='Update DB for given STAGs with results from Dell.',
            action='store_true')
    parser.add_argument('--updateall',
            help='Refresh all, eol or non-eol entries in DB from Dell.',
            choices=['eol', 'non-eol', 'all'])
    parser.add_argument('--diffupdate',
            help="Update DB with results from Dell if there's no existing entry for given STAGs.",
            action='store_true')
    parser.add_argument('--skip', help='''
    Skip local DB check and always poll Dell for data.''',
            action='store_true')
    parser.add_argument('--remove', help='Remove STAG from local DB.',
            action='store_true')
    parser.add_argument('--eol', help='Set given EOL state for STAG.',
            choices=['false', 'true'])
    parser.add_argument('--exp',
            help='Show hardware which has <= N remaining days of warranty.')
    parser.add_argument('--printall', help='Print everything we have in the DB.',
            action='store_true')
    parser.add_argument('--hostname',
            help='Set hostname for the STAG entry')
    parser.add_argument('--model',
            help='Set model for the STAG entry.')

    args = parser.parse_args()
    if len(sys.argv) < 2:
        parser.print_help()
        sys.exit()
    return args

def days_remaining(endwar = None):
    ''' Checks how many days we have remaining in the warranty '''
    delta = (endwar - datetime.datetime.now()).days
    if delta < 0:
        return 0
    else:
        return delta

def get_warr(svctag):
    '''
    Return warranty information from either DB or
    by further querying it from Dell site
    '''
    if args.update or args.updateall:
        print '[%s] Fetching updated data from Dell.' % svctag
        return get_warr_from_dell(svctag)
    elif args.skip:
        return get_warr_from_dell(svctag)
    else:
        try:
            shipped_date = db[svctag]['shipped']
            end_date = db[svctag]['endwarranty']
            model = db[svctag]['model']
            drem = days_remaining(datetime.datetime.strptime(end_date, DSTRING))
            return shipped_date, end_date, drem, model, None

        except KeyError:
            sys.stderr.write("[%s] doesn't exist in DB, fetching from Dell.\n"
                    % svctag)
            return get_warr_from_dell(svctag)

def get_warr_from_dell(svctag):
    '''
    Get the data for given tag from dell site
    If we're querying > 10 tags, this will sleep 1s per query to
    reduce the chance of Dell's site refusing us.

    Core of this function is adopted from:
        https://gist.github.com/leinaddm/1893036
    '''

    if len(args.stags) > 10:
        # Sleep a bit between queries if we're trying to update a lot of them.
        # Dell seems to be bit triggerhappy at kicking us out for querying a lot.
        sleep(1)

    client = suds.client.Client(URL)
    res = client.service.GetAssetInformation(ID, 'dellwarrantycheck',
            svctag)

    #print client.dict(res)

    if len(res) == 0:
        sys.stderr.write('[%s] Unable to get details for given service tag.\n'
                % svctag)
        return False

    hdrdata = res['Asset'][0]['AssetHeaderData']

    try:
        model = hdrdata['SystemType'] + ' ' + hdrdata['SystemModel']
    except AttributeError:
        model = 'unknown'
        sys.stderr.write(
                "[%s] SystemType or SystemModel not found.\n" % svctag )
    ent = res['Asset'][0]['Entitlements'][0]

    shipped = hdrdata['SystemShipDate']
    warrs = []
    for i in ent:
        if i == None:
            continue
        warrs.append(i['EndDate'])

    warrs.sort()
    endwarranty = warrs[-1]

    drem = days_remaining(endwarranty)
    shipped_date = shipped.strftime(DSTRING)
    end_date = endwarranty.strftime(DSTRING)
    return shipped_date, end_date, drem, model, True

def compose_data(staglist=None):
    '''
    Composes dict from given service tags.
    If none are give, we get everything from the DB.
    Write the updated data to DB if so asked.
    '''
    data = {}
    db_updates = []
    poll = None

    if not staglist:
        staglist = []
        for key in db:
            staglist.append(key)
    for tag in staglist:

        if args.updateall == 'non-eol' and db[tag]['eol_status'] == 'True':
            continue
        elif args.updateall == 'eol' and db[tag]['eol_status'] != 'True':
            continue
        try:
            (shipped, endw, drem, model, poll) = get_warr(tag)
        except TypeError:
            continue

        except urllib2.URLError:
            # Catch the urllib error if Dell kicked us out and sleep more
            # before retrying.
            sys.stderr.write("[%s] Dell kicked our query, sleeping a while..\n"
                    % tag)
            sleep(5)
            try:
                (shipped, endw, drem, model, poll) = get_warr(tag)
            except urllib2.URLError:
                # Give up
                sys.stderr.write("[%s] Still got kicked out, giving up..\n"
                        % tag)
                continue
        try:
            if db[tag]['eol_status']:
                eol = db[tag]['eol_status']
        except KeyError:
            eol = 'None'
        try:
            if db[tag]['hostname']:
                hostname = db[tag]['hostname']
        except KeyError:
            hostname = 'None'

        if model == 'unknown':
            try:
                if db[tag]['model']:
                    model = db[tag]['model']
            except KeyError:
                pass

        data[tag] = {
                'shipped': shipped,
                'endwarranty': endw,
                'model': model,
                'days_remaining': drem,
                'eol_status': eol,
                'hostname': hostname
                }
        if ( args.update or args.eol or
                args.diffupdate or args.updateall == 'all'):
            db[tag] = data[tag]

        if poll:
            db_updates.append(tag)

    return data, db_updates

def remove_key_from_db(svctag):
    ''' Deletes the given keys from local DB '''
    removed = []
    fails = []
    for key in svctag:
        try:
            del db[key]
            removed.append(key)
        except KeyError:
            fails.append(key)
    return removed, fails

def set_entry(svctag, entry, value):
    ''' Set @entry as @value for the given service tag. '''
    for key in svctag:
        try:
            if db[key]:
                db[key][entry] = value
                print '[%s] %s set as [%s]' % ( key, entry, value )
        except KeyError:
            print '[%s] not found in the DB!' % key

def set_eol_status(svctag, state):
    '''
    Set the EOL status for given tags.
    Initial state for EOL status is 'None'.
    '''
    if state == 'false':
        for key in svctag:
            if db[key]:
                db[key]['eol_status'] = 'False'
                print '[%s] EOL status set in DB as "False"!' % key
    elif state == 'true':
        for key in svctag:
            if db[key]:
                db[key]['eol_status'] = 'True'
                print '[%s] EOL status set in DB as "True"!' % key

def get_expiring_hardware(scope):
    '''
    Find hardware from the DB that expires in =< scope days.
    Skip all EOL = 'True' tagged hardware.
    '''
    exp_hw = []
    for key in db:
        if db[key]['eol_status'] == 'True':
            continue
        else:
            drem = days_remaining(datetime.datetime.strptime(
                db[key]['endwarranty'], DSTRING))
            if int(drem) <= scope:
                exp_hw.append(key)
    return exp_hw


def print_json(data):
    ''' Output as JSON format '''
    print json.dumps(data, indent=4, sort_keys=True)

def print_csv(data):
    ''' Output as CSV '''
    print 'servicetag,model,shipped,endwarranty,daysremaining,eolstatus,hostname'
    for tag in data:
        print '%s,%s,%s,%s,%s,%s,%s' % ( tag, data[tag]['model'],
            data[tag]['shipped'], data[tag]['endwarranty'],
            data[tag]['days_remaining'], data[tag]['eol_status'],
            data[tag]['hostname'])

def print_text(data):
    ''' Output as plain text '''
    for tag in data:
        print 'Service Tag:     ', tag
        print ' Model:          ', data[tag]['model']
        print ' Shipped:        ', data[tag]['shipped']
        print ' End Warranty:   ', data[tag]['endwarranty']
        print ' Days Remaining: ', data[tag]['days_remaining']
        print ' EOL Status:     ', data[tag]['eol_status']
        print ' Hostname:       ', data[tag]['hostname']

def _print(data, diff=None):
    ''' Wrapper to call different print jobs with proper data '''

    if diff:
        diff_data = {}
        for key in diff:
            diff_data[key] = data[key]
        data = diff_data

    if args.json:
        print_json(data)
    elif args.csv:
        print_csv(data)
    else:
        print_text(data)

def close_db(db):
    ''' Handle closing the shelve db '''
    shelve.Shelf.close(db)
    flock(db.lockfile.fileno(), LOCK_UN)
    db.lockfile.close()

def open_db(dbfname, args):
    ''' Handle opening the shelve db and locking it '''

    lockfilename = dbfname + '.lock'
    lockfile = open(lockfilename, 'w')

    if ( args.update or args.remove or args.eol
            or args.hostname or args.diffupdate
            or args.model or args.updateall ):
        flock(lockfile.fileno(), LOCK_EX | LOCK_NB)
        db = shelve.open(dbfname, writeback=True)
    else:
        if os.path.isfile(dbfname):
            flock(lockfile.fileno(), LOCK_SH)
            db = shelve.open(dbfname, flag='r')
        else:
            # Create the DB if we're only querying and don't have it yet.
            flock(lockfile.fileno(), LOCK_EX | LOCK_NB)
            db = shelve.open(dbfname, flag='c')
            db.close()
            flock(lockfile.fileno(), LOCK_UN)
            flock(lockfile.fileno(), LOCK_SH)
            db = shelve.open(dbfname, flag='r')

    db.close = new.instancemethod(close_db, db, shelve.Shelf)
    db.lockfile = lockfile

    return db

def main(args, stags):
    ''' Parse majority of the options and take actions '''

    if args.hostname:
        if stags:
            set_entry(stags, 'hostname', args.hostname)
            sys.exit()
        else:
            print 'No service tags given!'
            sys.exit()

    if args.model:
        if stags:
            set_entry(stags, 'model', args.model)
            sys.exit()
        else:
            print 'No service tags given!'
            sys.exit()

    if args.remove:
        removed, fails = remove_key_from_db(stags)
        for key in removed:
            print '[%s] removed from DB!' % key
        for key in fails:
            print "[%s] doesn't exist in the DB!" % key
        sys.exit()

    if args.exp or args.printall or args.updateall:
        (data, db_updates) = compose_data()
    else:
        (data, db_updates) = compose_data(stags)

    if not data:
        print 'No valid service tags returned!'
        sys.exit()

    if args.exp:
        exp = get_expiring_hardware(int(args.exp))
        exp_data = {}
        for key in exp:
            exp_data[key] = data[key]
        _print(exp_data)
        sys.exit()

    if args.update or args.diffupdate or args.updateall:
        if len(db_updates) != 0:
            _print(data, db_updates)
        if len(db_updates) > 1 or len(db_updates) == 0:
            print '%i entries updated.' % len(db_updates)
        else:
            print '%i entry updated.' % len(db_updates)
        sys.exit()

    if args.eol:
        set_eol_status(stags, args.eol)
        sys.exit()

    _print(data)
    sys.exit()

if __name__ == '__main__':

    args =  opts()
    stags = [s.upper() for s in args.stags]
    ID = re.sub(r'[a-zA-Z]', str(randint(1, 9)), str(uuid4()))
    try:
        db = open_db(DB, args)
        atexit.register( lambda : close_db(db))
    except IOError:
        sys.stderr.write("Unable to get lock for %s.\n" % DB)
        sys.exit()
        
    main(args, stags)

